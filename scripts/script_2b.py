import re
import os
import argparse
import numpy as np
import pandas as pd
import pathlib
from scipy.stats import fisher_exact

L_DEEP=["human_TATA", "human_nonTATA" ,"mouse_TATA" ,"mouse_nonTATA"] 

def parse_args():
	parser = argparse.ArgumentParser(description="Script 2b computing selected statistic metrics (accuracy, recall, FDR, ...) for true classification  of sequences with/without TATA motif on selected set of results from DeePromoter models results (output of script_2a.py)",
		formatter_class=argparse.RawTextHelpFormatter)


	parser.add_argument('ins',metavar='inputs', nargs="+",  help="""List of .txt files containing results from four DeePromoter models 
with grand truth information about presence of TATA motif in the last column, generated by script_2a.py""",
		type=pathlib.Path) 

	parser.add_argument('-o','--out', nargs=1, help="""Name of output .txt file, where results will be saved;
Default: results/DeePromoter_out_TATA_metrics.txt""",default=None)


	args = parser.parse_args()


	data_in=None
	if isinstance(args.ins, list):
		data_in=args.ins
	else:
		data_in=args.ins[0]
	n_correct=0
	for file in data_in:
		if os.path.isfile(file) or os.path.isfile(os.path.abspath(file)):
			n_correct+=1
		else:
			print(f"!!!	Provided path to input file {file} is incorrect\n")


	out=None
	if args.out is None:
		if not os.path.isdir("results"):
			os.mkdir("results")
		out=f'results/DeePromoter_out_TATA_metrics.txt'
	elif os.path.isfile(args.out[0]) or os.path.isfile(os.path.abspath(args.out[0])) :
		print("provided output file exists; overwritting...\n")
		out = args.out[0]
	elif not re.search("//",args.out[0]):
		out = args.out[0]
	else:
		print("!!!!!!	Provided path to output file is incorrect\n")


	if out and data_in:
		return [data_in, out]
	else:
		return None




def main():
	inputs=parse_args()
	IS_nonTATA=[0,1,0,1]
	if not inputs is None:
		with open(inputs[1],"w") as out:
			print(f"{' '*13}> Run script_2b.py < \n\n{'#'*20}START{'#'*20}")
			print("Inputs file\t\t\t\tTrue class\n")
			out.write(f"{' '*13}> Run script_1b.py < \n\n{'#'*20}START{'#'*20}\nInputs file\n")
			for i in inputs[0]:
				print(f"{i}")
				out.write(f"{i}")
			print(f"\n\nOutput file:\t{inputs[1]}")
			out.write(f"\n\nOutput file:\t{inputs[1]}")

			contingency_table=np.zeros((len(L_DEEP),2,2),dtype=int)
			for i in range(len(inputs[0])):

				file=pd.read_csv(inputs[0][i],sep="\t",header=None)
				for j in range(len(L_DEEP)):
					for k in range(2):
						for l in range(2):

							contingency_table[j,k,l]+=len(file[(file.iloc[:,j]==l) & (file.iloc[:,len(L_DEEP)]==k)])
			for i in range(len(L_DEEP)):
				acc_TATA=(contingency_table[i,1,1])/contingency_table[i,1,:].sum()
				acc_nonTATA=(contingency_table[i,0,1])/contingency_table[i,0,:].sum()
				F = fisher_exact(contingency_table[i,:,:])
				Fl = fisher_exact(contingency_table[i,:,:],alternative="less")
				Fg = fisher_exact(contingency_table[i,:,:],alternative="greater")
				s=f"\nmodel: {L_DEEP[i]}\ncontingency table:\t\tnonTATA\t\tTATA\n\tPredicted Negative\t{contingency_table[i,0,0]}\t\t{contingency_table[i,1,0]}\n"
				s=f"{s}\tPredicted Positive\t{contingency_table[i,0,1]}\t\t{contingency_table[i,1,1]}\n"
				s=f"{s}\nacc TATA:\t{acc_TATA}\nacc nonTATa:\t{acc_nonTATA}\n\nFiher exact tests:\np-value:\t{F.pvalue}\ttwo-sided (H0: there is no difference in proportion of correctly prediced 1 between categories TATA/nonTATA )"
				s=f"{s}\np-value:\t{Fl.pvalue}\tless (H0: correct prediction for TATA is more probable than for nonTATA)"
				s=f"{s}\np-value:\t{Fg.pvalue}\tgreater (H0: correct prediction for nonTATA is more probable than for TATA)"
				print(s)
				out.write(f"\n{s}")


if __name__ == "__main__":
	main()
