from sklearn.metrics import roc_auc_score
import re
import os
import argparse
import numpy as np
import pandas as pd
import pathlib

L_DEEP=["human_TATA", "human_nonTATA" ,"mouse_TATA" ,"mouse_nonTATA"] 

def parse_args():
	parser = argparse.ArgumentParser(description="Script 3b computing statistic on classification results DeePromoter trained on TATA to trained on nonTATA - disjointment analasys (output of script_1a.py)",
		formatter_class=argparse.RawTextHelpFormatter)


	parser.add_argument('ins',metavar='inputs', nargs="+",  help="""List of .txt files containing results from four DeePromoter models, generated by script_1a.py""",
		type=pathlib.Path)

	parser.add_argument('-o','--out', nargs=1, help="""Name of output .txt file, where results will be saved;
Default: results/DeePromoter_out_TATA_vs_nonTATA.csv""",default=None)
	parser.add_argument('-p','--save_percentage', help="""Save percentage of sequences instead of total number per""",action= 'store_true')


	args = parser.parse_args()


	data_in=[]
	if isinstance(args.ins, list):
		data_tmp=args.ins
	else:
		data_tmp=args.ins[0]
	for file in data_tmp:
		if os.path.isfile(file) or os.path.isfile(os.path.abspath(file)):
			data_in.append(file)
		else:
			print(f"!!!	Provided path to input file {file} is incorrect\n")


	out=None
	if args.out is None:
		if not os.path.isdir("results"):
			os.mkdir("results")
		if args.save_percentage:
			out=f'results/DeePromoter_out_TATA_vs_nonTATA_percent.csv'
		else:
			out=f'results/DeePromoter_out_TATA_vs_nonTATA.csv'
	elif os.path.isfile(args.out[0]) or os.path.isfile(os.path.abspath(args.out[0])) :
		print("provided output file exists; overwritting...\n")
		out = args.out[0]
	elif not re.search("//",args.out[0]):
		out = args.out[0]
	else:
		print("!!!!!!	Provided path to output file is incorrect\n")


	if out and  data_in:
		return [data_in, out, args.save_percentage]
	else:
		return None




def main():
	inputs=parse_args()
	
	if not inputs is None:
		with open(inputs[1],"w") as out:
			print(f"{' '*13}> Run script_3b.py < \n\n{'#'*20}START{'#'*20}\nsave percents: {inputs[2]}")

			out.write(f"File,")
			s="Input file,\t"
			for j in range(int(len(L_DEEP)/2)):
				for k in range(2):
					for l in range(2):
						out.write(f"{L_DEEP[j*2]}_{k}_{L_DEEP[j*2+1]}_{l}, ")
						s=f"{s}{L_DEEP[j*2]}_{k}_{L_DEEP[j*2+1]}_{l},\t"

			print(f"\nOutput file:\t{inputs[1]}\n\n{s}\n")
			for i in range(len(inputs[0])):
				file=pd.read_csv(inputs[0][i],sep="\t",header=None)
#				print(file)
				res=np.zeros(len(L_DEEP)*2,dtype=int)
				for j in range(int(len(L_DEEP)/2)):
					for k in range(2):
						for l in range(2):
							res[4*j+2*k +l]=file[(file[j*2]==k) & (file[j*2+1]==l)].shape[0]
				if inputs[2]:
					res=res/res[:int(len(res)/2)].sum()
				s=str(res.tolist()).replace("]","").replace("[","") # .replace(" ",",").replace(",,",",")
				out.write(f"\n{inputs[0][i]}, {s}")

				print(f"\n{inputs[0][i]}, {s}")


if __name__ == "__main__":
	main()
