import re
import os
import argparse
import numpy as np
import pandas as pd
import pathlib

L_DEEP=["human_TATA", "human_nonTATA" ,"mouse_TATA" ,"mouse_nonTATA"] 

def parse_args():
	parser = argparse.ArgumentParser(description="Script 1b computing selected statistic metrics (accuracy, recall, FDR, ...) on selected set of results from DeePromoter models results (output of script_1a.py)",
		formatter_class=argparse.RawTextHelpFormatter)


	parser.add_argument('ins',metavar='inputs', nargs="+",  help="""List of .txt files containing results from four DeePromoter models, generated by script_1a.py""",
		type=pathlib.Path) #argparse.FileType('r', encoding='utf-8'))
	parser.add_argument("-c",'--true_class', nargs="+",metavar="class", help="""Set true classes for results from each file;
number of class have to be equal to numnber of files; Default: [1, 1, ...]
* 0 - non-promoter
* 1 - promoter""",default=0,choices = [0,1],type=int)

#	parser.add_argument('--input_dir',metavar='PATH', nargs=1, 
#		help="""Path to input directory containing all files used in this part of analasis; default: /results""", default="results")
	parser.add_argument('-o','--out', nargs=1, help="""Name of output .txt file, where results will be saved;
Default: results/DeePromoter_out_metrics.txt""",default=None)


	args = parser.parse_args()

	if isinstance(args.true_class, list):
		t=[]
		for i in args.true_class:
			t.append(int(i))
	else:
		t=[int(true_class[0])]

	data_in=None
	if isinstance(args.ins, list):
		data_in=args.ins
	else:
		data_in=args.ins[0]
	n_correct=0
	for file in data_in:
		if os.path.isfile(file) or os.path.isfile(os.path.abspath(file)):
			n_correct+=1
		else:
			print(f"!!!	Provided path to input file {file} is incorrect\n")
	if n_correct!=len(t):
		data_in=None
		print(f"\n\n!!! Number of provided input files:\t\t{n_correct}\ndiffers from number of provided classes:\t{len(t)}\n\n")

	out=None
	if args.out is None:
		if not os.path.isdir("results"):
			os.mkdir("results")
		out=f'results/DeePromoter_out_metrics.txt'
	elif os.path.isfile(args.out[0]) or os.path.isfile(os.path.abspath(args.out[0])) :
		print("provided output file exists; overwritting...\n")
		out = args.out[0]
	elif not re.search("//",args.out[0]):
		out = args.out[0]
	else:
		print("!!!!!!	Provided path to output file is incorrect\n")


	if t and data_in:
		return [data_in, out,t]
	else:
		return None




def main():
	inputs=parse_args()
	
	if not inputs is None:
		with open(inputs[1],"w") as out:
			print(f"{' '*13}> Run script_1b.py < \n\n{'#'*20}START{'#'*20}")
			print("Inputs file\t\t\t\tTrue class\n")
			out.write(f"{' '*13}> Run script_1b.py < \n\n{'#'*20}START{'#'*20}\nInputs file\t\t\t\t\tTrue class\n")
			for i,j in zip(inputs[0],inputs[2]):
				print(f"{i}\t{j}")
				out.write(f"{i}\t{j}\n")
			print(f"\n\nOutput file:\t{inputs[1]}")
			out.write(f"\n\nOutput file:\t{inputs[1]}")

			contingency_table=np.zeros((len(L_DEEP),2,2),dtype=int)
			for i in range(len(inputs[0])):
				c=inputs[2][i]
				file=pd.read_csv(inputs[0][i],sep="\t",header=None)
				for j in range(len(L_DEEP)):
					res=sum(file.iloc[:,j]==c)
					contingency_table[j,c,c]+=res
					contingency_table[j,c,1-c]+=file.shape[0]-res
			for i in range(len(L_DEEP)):
				acc=(contingency_table[i,0,0]+contingency_table[i,1,1])/contingency_table[i].sum()
				if contingency_table[i,:,1].sum():
					FDR=(contingency_table[i,0,1])/contingency_table[i,:,1].sum()
				else:
					FDR="NaN"
				if contingency_table[i,1,:].sum():
					TPR=(contingency_table[i,1,1])/contingency_table[i,1,:].sum()
				else:
					TPR="NaN"
				s=f"\nmodel: {L_DEEP[i]}\ncontingency table:\t\tNegative\tPositive\n\tPredicted Negative\t{contingency_table[i,0,0]}\t\t{contingency_table[i,1,0]}\n"
				s=f"{s}\tPredicted Positive\t{contingency_table[i,0,1]}\t\t{contingency_table[i,1,1]}\n\naccuracy:\t{acc}\nrecall:\t{TPR}\nFDR:\t{FDR}"
				print(s)
				out.write(f"\n{s}")


if __name__ == "__main__":
	main()
